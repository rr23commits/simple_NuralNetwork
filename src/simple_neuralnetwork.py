# -*- coding: utf-8 -*-
"""simple_NeuralNetwork.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uXoShHTn2rI9ILCa7AkcOKyAJbH9Wu3N
"""

import torch
import torch.nn as nn
import torch.nn.functional as F

class Model (nn.Module):
    def __init__(self, in_features = 4, h1=8, h2 =9, out_features=3):
      #no of inputs = 4
      #isze of first layer = 8
      #size of second layer =9
      #no of outputs = 3
        super().__init__()
        self.fc1 = nn.Linear(in_features, h1) #layer 1
        self.fc2 = nn.Linear(h1,h2) #layer 2
        self.out = nn.Linear(h2, out_features) #output

    def forward(self, x):
        x = F.relu(self.fc1(x)) #rectfied linear unit
        x = F.relu(self.fc2(x))
        x = self.out(x)

        return x

#manual randominization
torch.manual_seed(20)

#instance for model
model = Model()

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline

url = ' https://gist.githubusercontent.com/netj/8836201/raw/6f9306ad21398ea43cba4f7d537619d0e07d5ae3/iris.csv'
df = pd.read_csv(url)

df.head()

#change last col from str - float
df['variety'] = df['variety'].replace("Setosa", 0.0)
df['variety']=df['variety'].replace("Versicolor",1.0)
df['variety'] = df['variety'].replace("Virginica", 2.0)
df

# train and train
X = df.drop('variety', axis = 1)
y = df['variety']

#convert to numpy arrays
X = X.values
y = y.values

from sklearn.model_selection import train_test_split

#Train test split
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2, random_state = 41)
#20% of dataa - test set, 80% - training

#Convert x and y labels to tensors
X_train = torch.FloatTensor(X_train)
X_test = torch.FloatTensor(X_test)
y_train = torch.LongTensor(y_train)
y_test = torch.LongTensor(y_test)

#Set criteria of model to measure error
criterion = nn.CrossEntropyLoss() #standard loss for multi-class classification

#Choose Adam Optimizer , learning rate (lr)
#lr = if error doesn't go down after iterations (epochs) -> lower lr

optimizer = torch.optim.Adam(model.parameters() ,lr =0.01)

#train model
#epochs - one run thru all training date in network

epochs = 100
losses = []
for i in range (epochs):
  y_pred = model.forward(X_train) # get predicted results

  #measure the loss / error
  loss = criterion(y_pred, y_train) #predicted value vs trained value

  #keep track of loss
  losses.append(loss.detach().numpy())

  #print ever 10 epoch
  if i%10 ==0:
    print(f"Epoch: {i} and loss: {loss}")

  #Do back propogration
  #take error rate of forward propogration and feed it back through network to
  #to fine tune the weights

  optimizer.zero_grad()
  loss.backward()
  optimizer.step()

#graph
plt.plot(range(epochs), losses)
plt.ylabel('Loss/error')
plt.xlabel('Epoch')
plt.show()

#evaluate model on test data set (validate model on test data)

with torch.no_grad(): #no back propogration
  y_eval = model.forward(X_test) #X_test - features from test set, y_eval - predictions
  loss = criterion(y_eval, y_test) #find loss of y_eval vs y_test

print(f"Loss on test data: {loss}")

correct = 0
with torch.no_grad():
  for i, data in enumerate(X_test):
    y_val = model.forward(data)

    #what type of flower the network thinks it is
    print(f"{i+1}.) {str(y_val)} \t {y_test[i]}")

    #correct or not
    if y_val.argmax().item() == y_test[i]:
      correct +=1
print(f"Correct: {correct} out of {len(y_test)}")

#creating a new data point manually
new_iris = torch.tesnor([4.7, 3.2, 1.3, 0.2])

with torch.nograd():
  model

#Save the NN model
torch.save(model.state_dict(), 'first_iris_model')

#load the saved model
new_model = Model()
new_model.load_state_dict(torch.load("first_iris_model"))

new_model.eval()